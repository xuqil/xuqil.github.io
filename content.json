{"meta":{"title":"SNH","subtitle":"SNH博客","description":"SNHGB","author":"xuqilong","url":"http://xuqilong.com","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-01-13T16:32:04.220Z","updated":"2020-01-13T16:32:04.220Z","comments":true,"path":"404.html","permalink":"http://xuqilong.com/404.html","excerpt":"","text":"404 Not Found **很抱歉，您访问的页面不存在** 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-01-14T05:20:28.533Z","updated":"2020-01-14T05:20:28.533Z","comments":true,"path":"about/index.html","permalink":"http://xuqilong.com/about/index.html","excerpt":"","text":"你好"},{"title":"所有分类","date":"2020-01-13T16:33:46.452Z","updated":"2020-01-13T16:33:46.452Z","comments":true,"path":"categories/index.html","permalink":"http://xuqilong.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-01-14T05:20:02.588Z","updated":"2020-01-14T05:20:02.588Z","comments":true,"path":"friends/index.html","permalink":"http://xuqilong.com/friends/index.html","excerpt":"","text":""},{"title":"项目","date":"2020-01-14T05:16:31.368Z","updated":"2020-01-14T05:16:31.368Z","comments":true,"path":"projects/index.html","permalink":"http://xuqilong.com/projects/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-01-13T16:34:07.809Z","updated":"2020-01-13T16:34:07.809Z","comments":true,"path":"tags/index.html","permalink":"http://xuqilong.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"django-rest-framework:Request","slug":"requst","date":"2020-01-14T05:32:36.820Z","updated":"2020-01-14T05:49:11.598Z","comments":true,"path":"2020/01/14/requst/","link":"","permalink":"http://xuqilong.com/2020/01/14/requst/","excerpt":"REST框架的Request类扩展了标准HttpRequest，增加了对REST框架的灵活请求解析和请求身份验证的支持。","text":"REST框架的Request类扩展了标准HttpRequest，增加了对REST框架的灵活请求解析和请求身份验证的支持。 Requests 如果您正在做基于REST的Web服务…则应忽略request.POST。 — Django开发人员小组 Malcom Tredinnick REST框架的Request类扩展了标准HttpRequest，增加了对REST框架的灵活请求解析和请求身份验证的支持。 Request 解析REST框架的Request对象提供了灵活的请求解析，使您能够以与通常处理表单数据相同的方式来处理JSON数据或其他媒体类型的请求。 .datarequest.data返回请求正文的解析内容。这类似于标准request.POST和request.FILES属性，除了： 它包括所有已解析的内容，包括文件和非文件输入。 它支持解析除以外的HTTP方法的内容POST，这意味着您可以访问PUT和PATCH请求的内容。 它支持REST框架的灵活请求解析，而不仅仅是支持表单数据。例如，您可以以处理传入表单数据的相同方式处理传入JSON数据。 有关更多详细信息，请参见解析器文档。 .query_paramsrequest.query_params是的更正确命名的同义词request.GET。 为了使代码内部更清晰，我们建议使用request.query_params，而不是Django的standard request.GET。这样做将有助于使您的代码库更加正确和明显-任何HTTP方法类型都可以包括查询参数，而不仅仅是GET请求。 .parsers在APIView类或@api_view装饰将确保这个属性被自动设置为列表Parser实例的基础上，parser_classes对视图设置或基于该DEFAULT_PARSER_CLASSES设置。 您通常不需要访问此属性。 注意：如果客户端发送格式错误的内容，则访问request.data可能会引发ParseError。默认情况下，REST框架的APIView类或@api_view装饰器将捕获错误并返回400 Bad Request响应。 如果客户端发送的请求的内容类型无法解析，则将UnsupportedMediaType引发异常，默认情况下将捕获该异常并返回415 Unsupported Media Type响应。 内容协商该请求公开了一些属性，使您可以确定内容协商阶段的结果。这使您可以实现一些行为，例如为不同的媒体类型选择不同的序列化方案。 .accepted_renderer内容协商阶段选择的渲染器实例。 .accepted_media_type一个字符串，表示内容协商阶段接受的媒体类型。 认证方式REST框架提供了灵活的按请求身份验证，使您能够： 对API的不同部分使用不同的身份验证策略。 支持使用多种身份验证策略。 提供与传入请求关联的用户和令牌信息。 .userrequest.user通常会返回的实例django.contrib.auth.models.User，尽管其行为取决于所使用的身份验证策略。 如果请求未经身份验证，则默认值为request.user的实例django.contrib.auth.models.AnonymousUser。 有关更多详细信息，请参见身份验证文档。 .authrequest.auth返回任何其他身份验证上下文。的确切行为request.auth取决于所使用的身份验证策略，但通常可能是身份验证请求所依据的令牌的实例。 如果该请求是未认证的，或者如果没有附加上下文存在时，默认值request.auth是None。 有关更多详细信息，请参见身份验证文档。 .authenticators在APIView类或@api_view装饰将确保这个属性被自动设置为列表Authentication实例的基础上，authentication_classes对视图设置或基于该DEFAULT_AUTHENTICATORS设置。 您通常不需要访问此属性。 注意：WrappedAttributeError调用.user或.auth属性时，您可能会看到一个凸起。这些错误源自作为标准的身份验证器AttributeError，但是有必要将它们重新引发为其他异常类型，以防止外部属性访问抑制它们。Python不会识别出AttributeError源于身份验证器，而是会假设请求对象没有.user或.auth属性。身份验证器将需要固定。 浏览器增强REST框架支持的几个浏览器增强功能，例如基于浏览器的PUT，PATCH和DELETE形式。 .methodrequest.method返回请求的HTTP方法的大写字符串表示形式。 基于浏览器的PUT，PATCH而DELETE形式是透明的支持。 有关更多信息，请参阅浏览器增强功能文档。 .content_typerequest.content_type，返回代表HTTP请求主体的媒体类型的字符串对象，如果未提供媒体类型，则返回空字符串。 通常，您通常不需要直接访问请求的内容类型，因为您通常将依赖于REST框架的默认请求解析行为。 如果确实需要访问请求的内容类型，则应.content_type优先使用属性而不是using request.META.get(&#39;HTTP_CONTENT_TYPE&#39;)，因为它为基于浏览器的非格式内容提供了透明的支持。 有关更多信息，请参阅浏览器增强功能文档。 .streamrequest.stream 返回表示请求正文内容的流。 通常，您通常不需要直接访问请求的内容，因为您通常会依赖REST框架的默认请求解析行为。 标准HttpRequest属性随着REST框架对RequestDjango 的扩展HttpRequest，所有其他标准属性和方法也都可用。例如request.META和request.session字典可以正常使用。 请注意，由于实现原因，Request该类不继承自HttpRequest类，而是使用composition扩展了该类。","categories":[{"name":"django","slug":"django","permalink":"http://xuqilong.com/categories/django/"},{"name":"django-rest-framework","slug":"django/django-rest-framework","permalink":"http://xuqilong.com/categories/django/django-rest-framework/"}],"tags":[{"name":"django-rest-framework","slug":"django-rest-framework","permalink":"http://xuqilong.com/tags/django-rest-framework/"},{"name":"django","slug":"django","permalink":"http://xuqilong.com/tags/django/"},{"name":"restful","slug":"restful","permalink":"http://xuqilong.com/tags/restful/"},{"name":"request","slug":"request","permalink":"http://xuqilong.com/tags/request/"}]},{"title":"list","slug":"1","date":"2020-01-13T16:24:23.000Z","updated":"2020-01-13T16:24:23.797Z","comments":true,"path":"2020/01/14/1/","link":"","permalink":"http://xuqilong.com/2020/01/14/1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"你好","slug":"heoo","date":"2020-01-06T13:00:02.869Z","updated":"2020-01-06T14:26:26.009Z","comments":true,"path":"2020/01/06/heoo/","link":"","permalink":"http://xuqilong.com/2020/01/06/heoo/","excerpt":"","text":"一、django中配置MongoDB1、在Djnago中使用MongoDB数据库时，使用mongoengine模块。1pip install mongoengine 2、在settings中配置数据库连接如下：1234567## 一、django中配置MongoDB##### 1、在Djnago中使用MongoDB数据库时，使用mongoengine模块。​ pip install mongoengine​``` 2、在settings中配置数据库连接如下：​python DATABASES = { &#39;default&#39;: { # &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;, # &#39;NAME&#39;: os.path.join(BASE_DIR, &#39;db.sqlite3&#39;), &#39;ENGINE&#39;: None } } from mongoengine import connect, register_connection connect(&#39;dj_test&#39;, host=&#39;47.106.249.200&#39;, port=443) ​ 注释掉sqlite3数据库，加上MongoDB配置。 name：mongodb数据库名字，host：mongodb数据库ip，port：数据库相应的端口。 3、当需要连接多个MongoDB时：一要在settings中增加数据库连接；二要在models中定义的表中指明使用的数据库。 settings配置如下： ​python from mongoengine import connect connect(&#39;name1&#39;, host=&#39;127.0.0.1&#39;, port=27017， alias=&#39;default&#39;) connect(&#39;name2&#39;, host=&#39;127.0.0.1&#39;, port=27017， alias=&#39;database2&#39;) ​ 当连接多个数据库时，需要添加alias参数，用于给多个数据库取别名，而且必须有一个default，不指定表使用库时，默认使用default库。 models.py： ​```pythonfrom mongoengine import *class Test(Document): name = StringField() age = IntField() meta = {&apos;db_alias&apos;: &apos;database2&apos;}​``` 注意：设置表要使用的库，添加元素meta，指定db_alias(key)的value值就可以，其中的value值为settings配置的数据库别名。 二、操作MongoDB1、MongoDB支持的数据类型fileds.py: ​python &#39;StringField&#39;, &#39;URLField&#39;, &#39;EmailField&#39;, &#39;IntField&#39;, &#39;LongField&#39;, &#39;FloatField&#39;, &#39;DecimalField&#39;, &#39;BooleanField&#39;, &#39;DateTimeField&#39;, &#39;DateField&#39;, &#39;ComplexDateTimeField&#39;, &#39;EmbeddedDocumentField&#39;, &#39;ObjectIdField&#39;, &#39;GenericEmbeddedDocumentField&#39;, &#39;DynamicField&#39;, &#39;ListField&#39;, &#39;SortedListField&#39;, &#39;EmbeddedDocumentListField&#39;, &#39;DictField&#39;, &#39;MapField&#39;, &#39;ReferenceField&#39;, &#39;CachedReferenceField&#39;, &#39;LazyReferenceField&#39;, &#39;GenericLazyReferenceField&#39;, &#39;GenericReferenceField&#39;, &#39;BinaryField&#39;, &#39;GridFSError&#39;, &#39;GridFSProxy&#39;, &#39;FileField&#39;, &#39;ImageGridFsProxy&#39;, &#39;ImproperlyConfigured&#39;, &#39;ImageField&#39;, &#39;GeoPointField&#39;, &#39;PointField&#39;, &#39;LineStringField&#39;, &#39;PolygonField&#39;, &#39;SequenceField&#39;, &#39;UUIDField&#39;, &#39;MultiPointField&#39;, &#39;MultiLineStringField&#39;, &#39;MultiPolygonField&#39;, &#39;GeoJsonBaseField&#39; ​ 2、增删改查models.py ​```pythonimport mongoengine class StudentModel(mongoengine.Document): name = mongoengine.StringField(max_length=16) age = mongoengine.IntField(default=0) ​``` view.py ​```pythonfrom django.shortcuts import render, HttpResponsefrom .models import StudentModelfrom django.views.generic import View def add(request): StudentModel.objects.create(name=’小明’, age=8) return HttpResponse(‘创建成功’) def find(request): result = StudentModel.objects.filter(name=’小明’) print(result[0].name) return HttpResponse(result[0].name) def update(request): result = StudentModel.objects.filter(name=’小明’).first().update(name=’小红’) print(result) return HttpResponse(result) def delete(request): result = StudentModel.objects.filter(name=’小红’).first().delete() print(result) return HttpResponse(result)​``` DATABASES = { ‘default’: { # ‘ENGINE’: ‘django.db.backends.sqlite3’, # ‘NAME’: os.path.join(BASE_DIR, ‘db.sqlite3’), ‘ENGINE’: None }}from mongoengine import connect, register_connectionconnect(‘dj_test’, host=’47.106.249.200’, port=443) 12345678910111213- 注释掉sqlite3数据库，加上MongoDB配置。- name：mongodb数据库名字，host：mongodb数据库ip，port：数据库相应的端口。##### 3、当需要连接多个MongoDB时：一要在settings中增加数据库连接；二要在models中定义的表中指明使用的数据库。- settings配置如下：&#96;&#96;&#96;pythonfrom mongoengine import connectconnect(&#39;name1&#39;, host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;27017， alias&#x3D;&#39;default&#39;)connect(&#39;name2&#39;, host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;27017， alias&#x3D;&#39;database2&#39;) 当连接多个数据库时，需要添加alias参数，用于给多个数据库取别名，而且必须有一个default，不指定表使用库时，默认使用default库。 models.py： 123456from mongoengine import *class Test(Document): name = StringField() age = IntField() meta = &#123;'db_alias': 'database2'&#125; 注意：设置表要使用的库，添加元素meta，指定db_alias(key)的value值就可以，其中的value值为settings配置的数据库别名。 二、操作MongoDB1、MongoDB支持的数据类型fileds.py: 123456789101112'StringField', 'URLField', 'EmailField', 'IntField', 'LongField','FloatField', 'DecimalField', 'BooleanField', 'DateTimeField', 'DateField','ComplexDateTimeField', 'EmbeddedDocumentField', 'ObjectIdField','GenericEmbeddedDocumentField', 'DynamicField', 'ListField','SortedListField', 'EmbeddedDocumentListField', 'DictField','MapField', 'ReferenceField', 'CachedReferenceField','LazyReferenceField', 'GenericLazyReferenceField','GenericReferenceField', 'BinaryField', 'GridFSError', 'GridFSProxy','FileField', 'ImageGridFsProxy', 'ImproperlyConfigured', 'ImageField','GeoPointField', 'PointField', 'LineStringField', 'PolygonField','SequenceField', 'UUIDField', 'MultiPointField', 'MultiLineStringField','MultiPolygonField', 'GeoJsonBaseField' 2、增删改查models.py 123456import mongoengineclass StudentModel(mongoengine.Document): name = mongoengine.StringField(max_length=16) age = mongoengine.IntField(default=0) view.py 1234567891011121314151617181920212223242526from django.shortcuts import render, HttpResponsefrom .models import StudentModelfrom django.views.generic import Viewdef add(request): StudentModel.objects.create(name='小明', age=8) return HttpResponse('创建成功')def find(request): result = StudentModel.objects.filter(name='小明') print(result[0].name) return HttpResponse(result[0].name)def update(request): result = StudentModel.objects.filter(name='小明').first().update(name='小红') print(result) return HttpResponse(result)def delete(request): result = StudentModel.objects.filter(name='小红').first().delete() print(result) return HttpResponse(result)","categories":[],"tags":[]},{"title":"Ingress的使用","slug":"1","date":"2020-01-06T12:42:18.357Z","updated":"2020-01-14T05:32:05.850Z","comments":true,"path":"2020/01/06/1/","link":"","permalink":"http://xuqilong.com/2020/01/06/1/","excerpt":"","text":"ingress的基本使用nginx ingress官网 kubernetes ingress介绍 ingress相当于nginx代理服务，在定义 Ingress策略之前，需要先部署Ingress Controller，以实现为所有后端 Service 提供一个统一的入口。 一、使用官网例子1、创建ingressContr=oller1kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml mandatory.yamlapiVersion: v1kind: Namespacemetadata: name: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata: name: nginx-configuration namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata: name: tcp-services namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata: name: udp-services namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---apiVersion: v1kind: ServiceAccountmetadata: name: nginx-ingress-serviceaccount namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRolemetadata: name: nginx-ingress-clusterrole labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxrules: - apiGroups: - \"\" resources: - configmaps - endpoints - nodes - pods - secrets verbs: - list - watch - apiGroups: - \"\" resources: - nodes verbs: - get - apiGroups: - \"\" resources: - services verbs: - get - list - watch - apiGroups: - \"\" resources: - events verbs: - create - patch - apiGroups: - \"extensions\" - \"networking.k8s.io\" resources: - ingresses verbs: - get - list - watch - apiGroups: - \"extensions\" - \"networking.k8s.io\" resources: - ingresses/status verbs: - update---apiVersion: rbac.authorization.k8s.io/v1beta1kind: Rolemetadata: name: nginx-ingress-role namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxrules: - apiGroups: - \"\" resources: - configmaps - pods - secrets - namespaces verbs: - get - apiGroups: - \"\" resources: - configmaps resourceNames: # Defaults to \"&lt;election-id&gt;-&lt;ingress-class&gt;\" # Here: \"&lt;ingress-controller-leader&gt;-&lt;nginx&gt;\" # This has to be adapted if you change either parameter # when launching the nginx-ingress-controller. - \"ingress-controller-leader-nginx\" verbs: - get - update - apiGroups: - \"\" resources: - configmaps verbs: - create - apiGroups: - \"\" resources: - endpoints verbs: - get---apiVersion: rbac.authorization.k8s.io/v1beta1kind: RoleBindingmetadata: name: nginx-ingress-role-nisa-binding namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxroleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: nginx-ingress-rolesubjects: - kind: ServiceAccount name: nginx-ingress-serviceaccount namespace: ingress-nginx---apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata: name: nginx-ingress-clusterrole-nisa-binding labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: nginx-ingress-clusterrolesubjects: - kind: ServiceAccount name: nginx-ingress-serviceaccount namespace: ingress-nginx---apiVersion: apps/v1kind: Deploymentmetadata: name: nginx-ingress-controller namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxspec: replicas: 1 selector: matchLabels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx template: metadata: labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx annotations: prometheus.io/port: \"10254\" prometheus.io/scrape: \"true\" spec: serviceAccountName: nginx-ingress-serviceaccount containers: - name: nginx-ingress-controller image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.25.0 args: - /nginx-ingress-controller - --configmap=$(POD_NAMESPACE)/nginx-configuration - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services - --udp-services-configmap=$(POD_NAMESPACE)/udp-services - --publish-service=$(POD_NAMESPACE)/ingress-nginx - --annotations-prefix=nginx.ingress.kubernetes.io securityContext: allowPrivilegeEscalation: true capabilities: drop: - ALL add: - NET_BIND_SERVICE # www-data -&gt; 33 runAsUser: 33 env: - name: POD_NAME valueFrom: fieldRef: fieldPath: metadata.name - name: POD_NAMESPACE valueFrom: fieldRef: fieldPath: metadata.namespace ports: - name: http containerPort: 80 - name: https containerPort: 443 livenessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP initialDelaySeconds: 10 periodSeconds: 10 successThreshold: 1 timeoutSeconds: 10 readinessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP periodSeconds: 10 successThreshold: 1 timeoutSeconds: 10--- 2、创建service1kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/service-nodeport.yaml service-nodeport.yaml 使用NodePort的方式 123456789101112131415161718192021222324apiVersion: v1kind: Servicemetadata: name: ingress-nginx namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxspec: type: NodePort ports: - name: http port: 80 targetPort: 80 protocol: TCP - name: https port: 443 targetPort: 443 protocol: TCP selector: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx--- 查看pod和service 123456789101112[root@k8s-master ~]# kubectl get all -n ingress-nginxNAME READY STATUS RESTARTS AGEpod/nginx-ingress-controller-86449c74bb-4npwg 1/1 Running 0 54sNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEservice/ingress-nginx NodePort 10.111.19.182 &lt;none&gt; 80:9861/TCP,443:59639/TCP 43sNAME READY UP-TO-DATE AVAILABLE AGEdeployment.apps/nginx-ingress-controller 1/1 1 1 54sNAME DESIRED CURRENT READY AGEreplicaset.apps/nginx-ingress-controller-86449c74bb 1 1 1 54s 提示：service 没有特地绑定node端口，通过service可知nodeport为9861，后面的http访问都要使用这个端口 通过浏览器访问节点ip:9861返回404则证明创建成功 3、创建backend我们需要一个后端服务，通过ingress转发后端服务 myweb-tomcat.yaml service使用ClusterIP 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: myweb namespace: ingress-nginx labels: app: myweb version: v1.1.1spec: replicas: 1 selector: matchLabels: app: myweb template: metadata: labels: app: myweb spec: containers: - image: tomcat:8.0 name: myweb ports: - containerPort: 8080 protocol: TCP args: # Uncomment the following line to manually specify Kubernetes API server Host # If not specified, Dashboard will attempt to auto discover the API server and connect livenessProbe: httpGet: path: / port: 8080 initialDelaySeconds: 30 timeoutSeconds: 30---apiVersion: v1kind: Servicemetadata: name: myweb labels: app: mywebspec: #默认为type: ClusterIP selector: app: myweb ports: - port: 80 targetPort: 8080 4、创建对应的ingress通过该ingress转发刚刚创建的backend 提示：``kubernetes官网中apiVersion使用的是networking.k8s.io/v1beta1，ingress官网使用extensions/v1beta1` tomcat-ingress.yaml 123456789101112131415apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: tomcat-ingress namespace: ingress-nginx annotations: kubernetes.io/ingress.class: \"nginx\"spec: rules: - host: tomcat.test.com http: paths: - backend: serviceName: myweb servicePort: 80 查看创建是否成功 12345678910[root@k8s-master mytest]# kubectl get ing -n ingress-nginxNAME HOSTS ADDRESS PORTS AGEtomcat-ingress tomcat.test.com 80 23s[root@k8s-master mytest]# kubectl get pod -n ingress-nginxNAME READY STATUS RESTARTS AGEmyweb-55c44c498d-95pvw 1/1 Running 0 17snginx-ingress-controller-86449c74bb-4npwg 1/1 Running 0 20m[root@k8s-master mytest]# kubectl get svcNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEkubernetes ClusterIP 10.96.0.1 &lt;none&gt; 443/TCP 22d 5、测试 因为绑定的域名为tomcat.test.com，所以需要现在/etc/hosts绑定域名 123127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6172.25.21.66 k8s-master tomcat.test.com 访问测试 1234567[root@k8s-master mytest]# curl -I tomcat.test.com:9861HTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 06:23:16 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-Encoding 返回预期内容，创建成功 局域网访问 win中添加DNS 在该文件C:\\Windows\\System32\\drivers\\etc\\hosts最后一行中添加172.25.21.66 tomcat.test.com 现在就可以通过浏览器使用域名tomcat.test.com访问了 6、问题但是有个问题，通过node节点IP不能成功，myweb的集群IP可以访问 1234567891011121314[root@k8s-master mytest]# curl -I 172.25.21.66:9861HTTP/1.1 404 Not FoundServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 06:24:27 GMTContent-Type: text/htmlContent-Length: 159Connection: keep-alive[root@k8s-master mytest]# curl -I 10.99.77.4HTTP/1.1 200 OKServer: Apache-Coyote/1.1Content-Type: text/html;charset=UTF-8Transfer-Encoding: chunkedDate: Thu, 08 Aug 2019 06:26:25 GMT 7、解决方法直接使用http，没有host apiVersion使用networking.k8s.io/v1beta1 1234567891011121314151617apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: name-virtual-host-ingressspec: rules: - host: tomcat.test.com http: paths: - backend: serviceName: myweb servicePort: 80 - http: paths: - backend: serviceName: myweb servicePort: 80 测试： 1234567891011121314151617[root@k8s-master tomcat]# curl -I 172.25.21.66HTTP/1.1 308 Permanent RedirectServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 08:28:08 GMTContent-Type: text/htmlContent-Length: 177Connection: keep-aliveLocation: https://172.25.21.66/[root@k8s-master tomcat]# curl -Ik https://172.25.21.66 #使用https访问HTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 08:37:24 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-EncodingStrict-Transport-Security: max-age=15724800; includeSubDomains 注意：使用无域名的Ingress转发规则时，将默认禁用非安全HTTP,强制启用HTTPS. 可以在Ingress的定义中设置一个 annotation: nginx.ingress.kubernetes.io/ssl-redirect=&quot;false&quot;&quot; 来关闭强制启用HTTPS的设置。 例如： 12345678910111213141516171819apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: name-virtual-host-ingress annotations: nginx.ingress.kubernetes.io/ssl-redirect: \"false\"spec: rules: - host: tomcat.test.com http: paths: - backend: serviceName: myweb servicePort: 80 - http: paths: - backend: serviceName: myweb servicePort: 80 二、修改后方式因为官网例子没有使用node节点的80和443端口，所以我们需要自己修改 提示：kubelet默认开发的端口是没有80的，需要修改配置 123456vim /etc/kubernetes/manifests/kube-apiserver.yaml - --service-account-key-file=/etc/kubernetes/pki/sa.pub - --service-cluster-ip-range=10.96.0.0/12 - --service-node-port-range=1-65535 #添加该选项开放使用端口，然后重启kubelet - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt ingressController的修改，主要修改Deployment，Deployment可以改为DaemonSet。这里就贴出Deployment部分内容，其他和上面一样 1、改为hostPort提示：这里不需要创建ingressController的service mandatory.yaml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778apiVersion: apps/v1kind: Deploymentmetadata: name: nginx-ingress-controller namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxspec: replicas: 1 selector: matchLabels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx template: metadata: labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx annotations: prometheus.io/port: \"10254\" prometheus.io/scrape: \"true\" spec: serviceAccountName: nginx-ingress-serviceaccount containers: - name: nginx-ingress-controller image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.25.0 args: - /nginx-ingress-controller - --configmap=$(POD_NAMESPACE)/nginx-configuration - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services - --udp-services-configmap=$(POD_NAMESPACE)/udp-services - --publish-service=$(POD_NAMESPACE)/ingress-nginx - --annotations-prefix=nginx.ingress.kubernetes.io securityContext: allowPrivilegeEscalation: true capabilities: drop: - ALL add: - NET_BIND_SERVICE # www-data -&gt; 33 runAsUser: 33 env: - name: POD_NAME valueFrom: fieldRef: fieldPath: metadata.name - name: POD_NAMESPACE valueFrom: fieldRef: fieldPath: metadata.namespace ports: - name: http containerPort: 80 hostPort: 80 #修改为hostPort - name: https containerPort: 443 hostPort: 443 #修改为hostPort livenessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP initialDelaySeconds: 10 periodSeconds: 10 successThreshold: 1 timeoutSeconds: 10 readinessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP periodSeconds: 10 successThreshold: 1 timeoutSeconds: 10 测试成功 1234567[root@k8s-master ingree-controller]# curl -I tomcat.test.comHTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 06:44:05 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-Encoding 需要说明的是，客户端只能通过域名 tomcat.test.com访问服务，这时要求客户端或者 DNS 能够将 tomcat.test.com域名解析到后端多个Node 的真实 IP 地址上。 通过 curl 访问 tomcat.test.com 提供的服务（可以用 –resolve 参数模拟 DNS 解析，目标地址为域名；也可以用-H &#39;HOST:tomcat.test.com&#39;参数设置 HTTP 投中要访问的域名，目标地址为 IP 地址），可以得到myweb返回的网页内容。 12curl --resolve tomcat.test.com:172.25.21.66 http://tomcat.test.com/#或者curl -H 'Host:tomcat.test.com' http://172.25.21.66/ 2、 改为hostNetwork提示：这里不需要创建ingressController的service mandatory.yaml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677apiVersion: apps/v1kind: Deploymentmetadata: name: nginx-ingress-controller namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxspec: replicas: 1 selector: matchLabels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx template: metadata: labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx annotations: prometheus.io/port: \"10254\" prometheus.io/scrape: \"true\" spec: hostNetwork: true #改为hostNetwork serviceAccountName: nginx-ingress-serviceaccount containers: - name: nginx-ingress-controller image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.25.0 args: - /nginx-ingress-controller - --configmap=$(POD_NAMESPACE)/nginx-configuration - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services - --udp-services-configmap=$(POD_NAMESPACE)/udp-services - --publish-service=$(POD_NAMESPACE)/ingress-nginx - --annotations-prefix=nginx.ingress.kubernetes.io securityContext: allowPrivilegeEscalation: true capabilities: drop: - ALL add: - NET_BIND_SERVICE # www-data -&gt; 33 runAsUser: 33 env: - name: POD_NAME valueFrom: fieldRef: fieldPath: metadata.name - name: POD_NAMESPACE valueFrom: fieldRef: fieldPath: metadata.namespace ports: - name: http containerPort: 80 - name: https containerPort: 443 livenessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP initialDelaySeconds: 10 periodSeconds: 10 successThreshold: 1 timeoutSeconds: 10 readinessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP periodSeconds: 10 successThreshold: 1 timeoutSeconds: 10 测试成功 1234567[root@k8s-master ingree-controller]# curl -I tomcat.test.comHTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 06:50:46 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-Encoding 三、ingress使用其他使用1、一个域名多个路径注意需要添加的annotations 12345678910111213141516171819apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: simple-fanout-example annotations: nginx.ingress.kubernetes.io/rewrite-target: /spec: rules: - host: foo.bar.com http: paths: - path: /foo backend: serviceName: service1 servicePort: 4200 - path: /bar backend: serviceName: service2 servicePort: 8080 示例： myweb2-tomcat.yaml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: myweb2 namespace: ingress-nginx labels: app: myweb2spec: replicas: 1 selector: matchLabels: app: myweb2 template: metadata: labels: app: myweb2 spec: containers: - image: tomcat:8.0 name: myweb2 ports: - containerPort: 8080 protocol: TCP args: # Uncomment the following line to manually specify Kubernetes API server Host # If not specified, Dashboard will attempt to auto discover the API server and connect livenessProbe: httpGet: path: / port: 8080 initialDelaySeconds: 30 timeoutSeconds: 30---apiVersion: v1kind: Servicemetadata: name: myweb2 namespace: ingress-nginx labels: app: myweb2spec: #默认为type: ClusterIP selector: app: myweb2 ports: - port: 80 targetPort: 8080 tomcat-ingress.yaml 注意需要添加的annotations 12345678910111213141516171819202122232425262728293031apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: tomcat-ingress namespace: ingress-nginx annotations: nginx.ingress.kubernetes.io/rewrite-target: /spec: rules: - host: tomcat.test.com http: paths: - path: /foo backend: serviceName: myweb servicePort: 80 - path: /bar backend: serviceName: myweb2 servicePort: 80 - http: paths: - backend: serviceName: myweb servicePort: 80 - http: paths: - path: /demo backend: serviceName: myweb servicePort: 80 测试： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152[root@k8s-master tomcat]# curl -Ik http://tomcat.test.com/fooHTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 09:06:55 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-Encoding[root@k8s-master tomcat]# curl -Ik http://tomcat.test.com/barHTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 09:07:00 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-Encoding[root@k8s-master tomcat]# curl -Ik https://tomcat.test.com/fooHTTP/1.1 404 Not FoundServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 09:07:04 GMTContent-Type: text/html;charset=utf-8Connection: keep-aliveVary: Accept-EncodingContent-Language: enStrict-Transport-Security: max-age=15724800; includeSubDomains[root@k8s-master tomcat]# curl -Ik https://172.25.21.66HTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 09:09:37 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-EncodingStrict-Transport-Security: max-age=15724800; includeSubDomains[root@k8s-master ingress]# curl -Ik https://172.25.21.66/demoHTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Fri, 09 Aug 2019 01:45:44 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-EncodingStrict-Transport-Security: max-age=15724800; includeSubDomains[root@k8s-master ingress]# curl -Ik http://172.25.21.66/demoHTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Fri, 09 Aug 2019 01:45:48 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-Encoding 这里有个问题：通过域名使用https访问会返回404错误，而通过IP使用https访问则不会有这种错误 原因：使用https访问相当于使用IP访问，访问https://tomcat.test.com/foo等于访问https://172.25.21.66/foo，因为IP访问的配置没有`/foo`，所有返回404。可以通过配置TLS安全设置以实现https访问域名的功能。 2、多个域名tomcat-ingress.yaml 123456789101112131415161718apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: name-virtual-host-ingressspec: rules: - host: foo.bar.com http: paths: - backend: serviceName: service1 servicePort: 80 - host: bar.foo.com http: paths: - backend: serviceName: service2 servicePort: 80 tomcat-ingress.yaml 1234567891011121314151617181920212223apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: name-virtual-host-ingressspec: rules: - host: first.bar.com http: paths: - backend: serviceName: service1 servicePort: 80 - host: second.foo.com http: paths: - backend: serviceName: service2 servicePort: 80 - http: paths: - backend: serviceName: service3 servicePort: 80 示例1 tomcat-ingress.yaml 123456789101112131415161718192021apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tomcat-ingress namespace: ingress-nginx annotations: kubernetes.io/ingress.class: \"nginx\"spec: rules: - host: tomcat.test.com http: paths: - backend: serviceName: myweb servicePort: 80 - host: tomcat.nedy.com http: paths: - backend: serviceName: myweb2 servicePort: 80 测试 123456789101112131415[root@k8s-master tomcat]# curl -I tomcat.test.comHTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 08:18:51 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-Encoding[root@k8s-master tomcat]# curl -I tomcat.nedy.comHTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 08:19:11 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-Encoding 示例2 tomcat-ingress.yaml 123456789101112131415161718192021222324apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: tomcat-ingress namespace: ingress-nginxspec: rules: - host: tomcat.test.com http: paths: - backend: serviceName: myweb servicePort: 80 - host: tomcat.nedy.com http: paths: - backend: serviceName: myweb2 servicePort: 80 - http: paths: - backend: serviceName: myweb3 servicePort: 80 测试： 123456789101112131415161718192021222324252627282930313233[root@k8s-master tomcat]# curl -I tomcat.nedy.com #可以使用https，这样相当于IP访问HTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 08:27:56 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-Encoding[root@k8s-master tomcat]# curl -I tomcat.test.com HTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 08:27:58 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-Encoding[root@k8s-master tomcat]# curl -I 172.25.21.66HTTP/1.1 308 Permanent RedirectServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 08:28:08 GMTContent-Type: text/htmlContent-Length: 177Connection: keep-aliveLocation: https://172.25.21.66/[root@k8s-master tomcat]# curl -Ik https://172.25.21.66 #可以使用https，和https://tomcat.nedy.com效果相同HTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 08:37:24 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-EncodingStrict-Transport-Security: max-age=15724800; includeSubDomains 四、Ingress的TLS安全设置对于使用https设置TLS的安全证书方面，Ingress 也可以支持。通过以下步骤进行设置： 创建自签名的密钥和SSL证书文件 将证书保存到Kubernetes中的一个Secret资源对象上。 将该Secret对象设置到Ingress中。 创建Secret secret.yaml 123456789apiVersion: v1kind: Secretmetadata: name: testsecret-tls namespace: defaultdata: tls.crt: base64 encoded cert # cert 文件内容 tls.key: base64 encoded key # key 文件内容type: kubernetes.io/tls 在Ingress中引用 Secret: secret-ingress.yaml 1234567891011121314151617apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: tls-example-ingressspec: tls: - hosts: - sslexample.foo.com secretName: testsecret-tls rules: - host: sslexample.foo.com http: paths: - path: / backend: serviceName: service1 servicePort: 80 示例： 1、创建证书1openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout rsa_private.key -out cret.crt -subj \"/CN=tomcat.nedy.com/O=vihoo\" 如果提供服务的网站不止一个域名，例如前面的第 3 中Ingress策略配置方式，则 SSL证书需要使用额外的一个 x509 v3 配置文件辅助完成，在[alt_names] 段中完成多个DNS域名的设置： /etc/ssl/openssl.cnf 1`...``[alt_names]``DNS.1 = mywebsite.com``DNS.2 = mywebsite2.com` 然后使用 OpenSSl 工具完成秘钥和证书的创建。 1) 首先完成自签名 CA 证书： 1`$ openssl genrsa -out ca.key 2048``Generating RSA private key, 2048 bit long modulus``..........+++``................................................+++``e is 65537 (0x10001)`` ` `$ openssl req -x509 -new -nodes -key ca.key -days 5000 -out ca.crt -subj ``\"/CN=mywebsite.com\"` 2) 基于 openssl.cnf和ca 证书生成ingress SSL 证书： 1`$ openssl genrsa -out ingress.key 2048``Generating RSA private key, 2048 bit long modulus``.................................+++``..............................................................................................+++``e is 65537 (0x10001)`` ` `$ openssl req -new -key ingress.key -out ingress.csr -subj ``\"/CN=mywebsite.com\"` `-config ``/etc/ssl/openssl``.cnf`` ` `$ openssl x509 -req -``in` `ingress.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out ingress.crt -days 5000 -extensions v3_req -extfile ``/etc/ssl/openssl``.cnf``Signature ok``subject=``/CN``=mywebsite.com``Getting CA Private Key` 2、创建secretsecret.yaml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152apiVersion: v1kind: Secretmetadata: name: testsecret-tls namespace: ingress-nginxdata: tls.crt: | MIIDJzCCAg+gAwIBAgIJAOpo5VvpwbsbMA0GCSqGSIb3DQEBCwUAMCoxGDAWBgNV BAMMD3RvbWNhdC5uZWR5LmNvbTEOMAwGA1UECgwFdmlob28wHhcNMTkwODA4MTAx MTI3WhcNMjAwODA3MTAxMTI3WjAqMRgwFgYDVQQDDA90b21jYXQubmVkeS5jb20x DjAMBgNVBAoMBXZpaG9vMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA qJYVO48OujM/ScRAZXyuuNZocIhwsaq25xTCeyVfF41C3Mjjb3ATnIQQjkOKlfMs AduZoQjnliHjOdaQIBvSrl+SDKpnND3lrFtiJA+pvPB7A6IXXeOZ0FmNFy/VIk1X 2e1lDNQpBQdr/uVFLeNFpeqBizaZ5m6BnI3OXmeSOzxnEvhMyKAs4LMi4yDpuf+t VKaMrBmzdIGVsm0J+Pq+5igfLIodnJ6bYMaXrA1bx00LyvBfq8JX1Vi6tdL9u8L6 iiyUCsubHvxx9NrB+x7dIkCJ4ppG7Z2PyhihTHrgFhIupHmusYOubuVVHcr/BPdZ RDh6C5mQrERcVZeHrE2RBwIDAQABo1AwTjAdBgNVHQ4EFgQUmeqpqaCMVEFDQpSV d486Q2jtT8MwHwYDVR0jBBgwFoAUmeqpqaCMVEFDQpSVd486Q2jtT8MwDAYDVR0T BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAlbLlvRimWAmPORZ0q7u1YUIygBBs AZeXXhNPjiWoU5o8lG/Ic8OfnQp++rnfyW+YNehoapLcOgIdS9yMZnegi6s+RW4H 0OAlGg5WC+/gwsVMWuzziAf4YJQBQCKtA6UbZTG/kk/9kDue9yMD6Fx4t68KGO05 rvt6TZIFlgrzwPSa8jHgboZonlV7/62fRRaGDGLOnv/ip6eBup4Gl3L5UTm8VZqf UGADwwXXXE/p5Zeox16bNkPDQAp5AoeMpTZ6tZQmRsx4/L3xX2qLtj4u7Xrdp8vF uA6TFeKpdjag9mljZu798iHjedUF5T8QK20/3mPgSiz6mLNACqxAqKaoBw== tls.key: | MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQColhU7jw66Mz9J xEBlfK641mhwiHCxqrbnFMJ7JV8XjULcyONvcBOchBCOQ4qV8ywB25mhCOeWIeM5 1pAgG9KuX5IMqmc0PeWsW2IkD6m88HsDohdd45nQWY0XL9UiTVfZ7WUM1CkFB2v+ 5UUt40Wl6oGLNpnmboGcjc5eZ5I7PGcS+EzIoCzgsyLjIOm5/61UpoysGbN0gZWy bQn4+r7mKB8sih2cnptgxpesDVvHTQvK8F+rwlfVWLq10v27wvqKLJQKy5se/HH0 2sH7Ht0iQInimkbtnY/KGKFMeuAWEi6kea6xg65u5VUdyv8E91lEOHoLmZCsRFxV l4esTZEHAgMBAAECggEASvD0nVY5uMIBNzx7V+H2FYqSQLwWRJRb3BtZXL6/J8wO 1fCjUa1jumbmqScTGxdPD8Bb6b74m7+Sr+pWhT95BzTKysCRQiLlzxmMZfVkge3w 8SuD8aO0g27bjlwgBbCWBfVGv04sseSbuGKYvw5RrrCxR35NKackDMDo5QRrd9Lo VBe//2OW2piAUq56Ln3mU4+F6+NFhjbwxpc2tCqI8HMqqb1Pg5dE2FGw801OCyoX 38gPqKutaJA3eGzw1S0Re866FBf/FYyjmV1oPNW0wrBP2/SqBIVWDLDNINeK3JnF 3LyB7rj7Ve0zeSM44moIloPvgzq1Yj0TE94jIFBAwQKBgQDSYt3zATv7QXX/MUtq 1tGPii3ZgPCYvCyY2vrxOktgDsIYA426u8HqDbMXKR0kED/mMP7OfJaISt6wYZBB 8sN7vSb1ewq6a4s7wfI6XE3jDgx+b8MwNnPS5be66L8QHNcsHkONbDthFbt0X6I6 qxYQAkXthfJ/iAdn+6YYP/YaoQKBgQDNIy43zBZhWlon4DTLg0ilk6hgHcjcxjG5 cD02Ucy4FdBPJ7iC0i4w4Ca+aL//ruVC1DZyYN57XYq1o/LvFZSBGq6gUhDm6KSU tMILgbIcVkq2CuiKX0K90IVDaji3rOqIJeZIZf1NWV6o3IohQyOl0Wvx7Qh3+Ijv dROMK9bypwKBgCYNt/OST5UcvAkSk3+Zp4H9Dln/FoWp0686PJWRY7zWLolFa0dR WrvJCpGv4BN71PL//ba/lkLEuA7TNtKW5IDnL7rLLJ+XgDGo3PVtaLEfA2eDM5zu 3HhTEK6AFr8FWG4kczeLUho3YhakjaVq+KygnKFfzwL+ScinHd3ZA9zBAoGAJfo+ YzwYZJual0lN3OOIPocwo+K/vge/Sup5mqXYNbhsIUtkQGvy+z90TMoNyaMydIXf Mpu2dLZjqK8amaKwJJqw+6NV17n4RkOUrRasx8w99qfcV0m9jHCfS1TN/Us4/E2v 7XVcSMaj3LU/qVrJrbgwuNA+Qh+0EkjlfozbNX8CgYEAmFyHG68VMoqF0Hn0I0as YqHaIJywR/1lNB2eZ5zYrloofkI7uUDOZuB2Ba2TS7ToAIRcJ/0/XoW8hBqh/k7o b9s/DjA6oIW6MlCTscjy6abJx2cEoJ5G3yoBQJBwAWgw/chn6LqzkcSRUQ48cvC2 FKePkp+hdszfelaG4ampaYI=type: kubernetes.io/tls 还可以这样创建secret： 1kubectl create secret tls testsecret-tls --key tls.key --cert tls.crt -n ingress-nginx 3、在Ingress中引用 Secretsecret-ingress.yaml 123456789101112131415161718apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: secret-ingress namespace: ingress-nginxspec: tls: - hosts: - tomcat.nedy.com secretName: testsecret-tls #默认ingress controller证书将该句注释掉 rules: - host: tomcat.nedy.com http: paths: - path: / backend: serviceName: myweb servicePort: 80 注意这里 4、访问测试1234567891011121314151617[root@k8s-master tomcat]# curl -Ik http://tomcat.nedy.com HTTP/1.1 308 Permanent Redirect Server: openresty/1.15.8.1Date: Thu, 08 Aug 2019 11:04:42 GMTContent-Type: text/htmlContent-Length: 177Connection: keep-aliveLocation: https://tomcat.nedy.com/ #会重定向到 https://tomcat.nedy.com[root@k8s-master tomcat]# curl -Ik https://tomcat.nedy.comHTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Thu, 08 Aug 2019 11:04:46 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-EncodingStrict-Transport-Security: max-age=15724800; includeSubDomains 5、其他 创建证书和secret 12openssl req -x509 -nodes -days 5000 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj \"/CN=tomcat.test.com\"kubectl create secret tls testsecret-tls -n ingress-nginx --key tls.key --cert tls.crt 使用 secret-ingress.yaml 1234567891011121314151617181920212223242526272829303132333435apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: secret-ingress namespace: ingress-nginx annotations: nginx.ingress.kubernetes.io/rewrite-target: /spec: tls: - hosts: - tomcat.test.com secretName: testsecret-tls rules: - host: tomcat.test.com http: paths: - path: / backend: serviceName: myweb servicePort: 80 - path: /bar backend: serviceName: myweb2 servicePort: 80 - host: tomcat.nedy.com #这里我没有配置该域名AC也可以通过https访问 http: paths: - path: / backend: serviceName: myweb servicePort: 80 - path: /bar backend: serviceName: myweb2 servicePort: 80 测试 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253[root@k8s-master ingress]# curl -Ik https://tomcat.test.comHTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Fri, 09 Aug 2019 02:46:57 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-EncodingStrict-Transport-Security: max-age=15724800; includeSubDomains[root@k8s-master ingress]# curl -Ik http://tomcat.test.comHTTP/1.1 308 Permanent RedirectServer: openresty/1.15.8.1Date: Fri, 09 Aug 2019 02:58:28 GMTContent-Type: text/htmlContent-Length: 177Connection: keep-aliveLocation: https://tomcat.test.com/ #会重定向到https://tomcat.test.com/[root@k8s-master ingress]# curl -Ik https://tomcat.test.com/barHTTP/1.1 200Server: openresty/1.15.8.1Date: Fri, 09 Aug 2019 02:57:39 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-EncodingStrict-Transport-Security: max-age=15724800; includeSubDomains[root@k8s-master ingress]# curl -Ik https://tomcat.nedy.comHTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Fri, 09 Aug 2019 02:47:02 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-EncodingStrict-Transport-Security: max-age=15724800; includeSubDomains[root@k8s-master ingress]# curl -Ik http://tomcat.nedy.comHTTP/1.1 308 Permanent RedirectServer: openresty/1.15.8.1Date: Fri, 09 Aug 2019 02:47:08 GMTContent-Type: text/htmlContent-Length: 177Connection: keep-aliveLocation: https://tomcat.nedy.com/[root@k8s-master ingress]# curl -Ik https://tomcat.nedy.com/barHTTP/1.1 200 OKServer: openresty/1.15.8.1Date: Fri, 09 Aug 2019 02:47:16 GMTContent-Type: text/html;charset=UTF-8Connection: keep-aliveVary: Accept-EncodingStrict-Transport-Security: max-age=15724800; includeSubDomains 这里有个疑惑：没有为tomcat.nedy.com配置证书，但是依然可以通过https访问 6、IP和域名访问是否为同一服务使用上面的例子 其中myweb使用的tomcat版本是tomcat-8.0，myweb2使用的tomcat版本是tomcat-9.0 1) secret-ingress.yaml 123456789101112131415161718192021222324apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: secret-ingress namespace: ingress-nginx annotations: nginx.ingress.kubernetes.io/rewrite-target: /spec: tls: - hosts: - tomcat.test.com secretName: testsecret-tls rules: - host: tomcat.test.com http: paths: - path: / backend: serviceName: myweb servicePort: 80 - path: /bar backend: serviceName: myweb2 servicePort: 80 验证： 12345678910[root@k8s-master ingress]# curl -k https://tomcat.test.com | grep Tomcat\\/ | grep h1 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 11266 0 11266 0 0 184k 0 --:--:-- --:--:-- --:--:-- 189k &lt;h1&gt;Apache Tomcat/8.0.53&lt;/h1&gt;[root@k8s-master ingress]# curl -k https://tomcat.test.com/bar | grep Tomcat\\/ | grep h1 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 11184 0 11184 0 0 252k 0 --:--:-- --:--:-- --:--:-- 260k &lt;h1&gt;Apache Tomcat/9.0.22&lt;/h1&gt; 2) secret-ingress.yaml 12345678910111213141516171819202122232425262728293031323334apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: secret-ingress namespace: ingress-nginx annotations: nginx.ingress.kubernetes.io/rewrite-target: /spec: tls: - hosts: - tomcat.test.com secretName: testsecret-tls rules: - host: tomcat.test.com http: paths: - path: / backend: serviceName: myweb servicePort: 80 - path: /bar backend: serviceName: myweb2 servicePort: 80 - http: paths: - path: / backend: serviceName: myweb2 servicePort: 80 - path: /bar backend: serviceName: myweb servicePort: 80 验证 1234567891011121314151617181920[root@k8s-master ingress]# curl -k https://tomcat.test.com | grep Tomcat\\/ | grep h1 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 11266 0 11266 0 0 188k 0 --:--:-- --:--:-- --:--:-- 193k &lt;h1&gt;Apache Tomcat/8.0.53&lt;/h1&gt;[root@k8s-master ingress]# curl -k https://tomcat.test.com/bar | grep Tomcat\\/ | grep h1 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 11184 0 11184 0 0 190k 0 --:--:-- --:--:-- --:--:-- 191k &lt;h1&gt;Apache Tomcat/9.0.22&lt;/h1&gt;[root@k8s-master ingress]# curl -k https://172.25.21.66 | grep Tomcat\\/ | grep h1 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 11184 0 11184 0 0 235k 0 --:--:-- --:--:-- --:--:-- 237k &lt;h1&gt;Apache Tomcat/9.0.22&lt;/h1&gt;[root@k8s-master ingress]# curl -k https://172.25.21.66/bar | grep Tomcat\\/ | grep h1 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 11266 0 11266 0 0 268k 0 --:--:-- --:--:-- --:--:-- 275k &lt;h1&gt;Apache Tomcat/8.0.53&lt;/h1&gt; 结论：相同的IP路径和域名路径可以转发不同的服务，通过相同路径的IP和域名访问的结果不一样，因为对应的服务不同，即IP和域名不对应。","categories":[{"name":"Kubernetes","slug":"Kubernetes","permalink":"http://xuqilong.com/categories/Kubernetes/"}],"tags":[{"name":"ingress","slug":"ingress","permalink":"http://xuqilong.com/tags/ingress/"}]}]}